#!/usr/bin/env python
# -*- mode: python; coding: utf-8 -*-
#
# Based on https://github.com/privacyidea/networkparser
# The original license follows:
#
# The MIT License (MIT)
#
# Copyright (c) 2015 Cornelius Koelbel
#
# Permission is hereby granted, free of charge, to any person obtaining a copy of
# this software and associated documentation files (the "Software"), to deal in
# the Software without restriction, including without limitation the rights to
# use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of
# the Software, and to permit persons to whom the Software is furnished to do so,
# subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in all
# copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
# FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
# COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
# IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
# CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.


import re
import json
import sys
import codecs
import netaddr
from pyparsing import White, Word, alphanums, CharsNotIn
from pyparsing import Forward, Group, OneOrMore
from pyparsing import pythonStyleComment
from pyparsing import Literal
from pyparsing import Optional, ZeroOrMore
from pyparsing import Regex, SkipTo


JSON_INDENT_LEVEL = 2
DEFAULT_LINK_LOCAL_LOW_BS = (42, 42)
SERIAL_FILE = "/var/lib/wirenboard/serial.conf"
RESERVED_IFACE = "eth0:42"
LINK_LOCAL_SECTION = ""  # disabled for now
# LINK_LOCAL_SECTION = """
# auto %(iface)s
# iface %(iface)s inet static
#   address 169.254.%(d1)d.%(d2)d
#   netmask 255.255.0.0
# """
PRIMARY_IFACE = "eth0"


class ParseError(Exception):
    pass


class Interface(object):
    """
    This represents an interface entry in /etc/network/interfaces.


    might look like:

    auto lo
    iface lo inet loopback

    auto eth0
    iface eth0 inet manual

    auto br0
    iface br0 inet dhcp
        bridge_ports eth0
        bridge_stp off
        bridge_fd 0
        bridge_maxwait 0
        post-up ip link set br0 address  aa:bb:cc:dd:ee:ff

    auto eth0
    iface eth0 inet static
        address 172.16.200.77
        netmask 255.255.255.0
        network 172.16.200.0
        broadcast 172.16.200.255
        gateway 172.16.200.10
        # dns-* options are implemented by the resolvconf package, if installed
        dns-nameservers 172.16.200.10
    """

    def __init__(self, iface, mode, ip=None, netmask="255.255.255.0",
                 network=None,
                 broadcast=None, gateway=None, nameserver=None, options=None):
        """
        Creates a new interface object

        :param iface: The name of the interface (lo, br0, eth0, eth1)
        :param mode: can bee loopback, manual, dhcp, static, ppp, bootp,
            tunnel, wvdial, ipv4ll
        :param ip: The IP Address of the interface
        :type ip: basestring
        :param netmask: The netmask of the interface
        :param network: The network of the interface. If omitted it will be
            calculated from IP and netmask
        :param broadcast: The broadcast of the interface. If omitted it will be
            calculated from UP and netmask
        :param gateway: The gateway
        :param nameserver: list of nameserver
        :type param: basestring
        :return: an interface object
        """
        self.options = options or []
        self.iface = iface
        self.mode = mode
        if self.mode not in ["auto", "manual", "dhcp", "static", "ppp",
                             "bootp", "tunnel", "wvdial", "ipv4ll"]:
            raise ParseError("No valid mode. Valid modes are 'auto', "
                             "'manual', 'dhcp' or 'static'.")
        self.ip = ip
        self.netmask = netmask
        self.network = network
        self.broadcast = broadcast
        self.gateway = gateway
        self.nameserver = (nameserver or "").split()
        if ip and netmask:
            if not netaddr.valid_ipv4(ip):
                raise ParseError("IP no valid IPv4 address.")

            network_object = netaddr.IPNetwork("%s/%s" % (ip, netmask))
            self.ip = ip
            self.netmask = netmask
            self.broadcast = self.broadcast or str(network_object.broadcast)
            self.network = self.network or str(network_object.network)
            if self.gateway:
                if not netaddr.valid_ipv4(self.gateway):
                    raise ParseError("Gateway no valid IPv4 address")
            for ns in self.nameserver:
                if not netaddr.valid_ipv4(ns):
                    raise ParseError("Nameserver no valid IPv4 address")

    def __str__(self):
        """
        This returns the Interface, just like it would be printed in
        /etc/networks/interfaces
        """
        iface = []
        iface.append("auto %s" % self.iface)
        iface.append("iface %s inet %s" % (self.iface, self.mode))
        if self.ip:
            iface.append("\taddress %s" % self.ip)
        if self.netmask:
            iface.append("\tnetmask %s" % self.netmask)
        if self.network:
            iface.append("\tnetwork %s" % self.network)
        if self.broadcast:
            iface.append("\tbroadcast %s" % self.broadcast)
        if self.gateway:
            iface.append("\tgateway %s" % self.gateway)
        if len(self.nameserver) > 0:
            iface.append("\tdns-nameservers %s" % " ".join(self.nameserver))
        for op in self.options:
            iface.append("\t%s" % op)

        return "\n".join(iface)


class NetworkParser(object):

    interface = Word(alphanums + ":")
    key = Word(alphanums + "-_")
    space = White().suppress()
    value = CharsNotIn("{}\n#")
    line = Regex("^.*$")
    comment = ("#")
    method = Regex("loopback|manual|dhcp|static|ppp|bootp|tunnel|wvdial|ipv4ll")
    stanza = Regex("auto|iface|mapping|allow-hotplug")
    option_key = Regex("bridge_\w*|post-\w*|up|down|pre-\w*|address"
                       "|network|netmask|gateway|broadcast|dns-\w*|scope|"
                       "pointtopoint|metric|hwaddress|mtu|hostname|"
                       "leasehours|leasetime|vendor|client|bootfile|server"
                       "|mode|endpoint|dstaddr|local|ttl|provider|unit"
                       "|options|frame|bitrate|netnum|media|wpa-[\w-]*")
    _eol = Literal("\n").suppress()
    option = Forward()
    option << Group(space
                    # + Regex("^\s*")
                    + option_key
                    + space
                    + SkipTo(_eol))
    interface_block = Forward()
    interface_block << Group(stanza
                             + space
                             + interface
                             + Optional(
                                 space
                                 + Regex("inet|can")
                                 + method
                                 + Group(ZeroOrMore(option))))

    # + Group(ZeroOrMore(assignment)))

    interface_file = OneOrMore(interface_block).ignore(pythonStyleComment)

    file_header = """# File parsed and saved by privacyidea.\n\n"""

    def __init__(self, infile=None, content=None):
        self.filename = None
        self.content = None
        if content:
            self._set_content(content)
        elif infile is not None:
            self.filename = infile
            self._read()
        if self.content is not None:
            self.interfaces = self.get_interfaces()

    def _set_content(self, content):
        if not content.endswith("\n"):
            self.content = content + "\n"
        else:
            self.content = content

    def _read(self):
        """
        Reread the contents from the disk
        """
        f = codecs.open(self.filename, "r", "utf-8")
        self._set_content(f.read())
        f.close()

    def get(self):
        """
        return the grouped config
        """
        if self.filename:
            self._read()
        config = self.interface_file.parseString(self.content)
        return config

    def save(self, filename=None):
        if not filename and not self.filename:
            raise ParseError("No filename specified")

        # The given filename overrules the own filename
        fname = filename or self.filename
        with open(fname, "w") as f:
            f.write(self.format())

    def format(self):
        """
        Format the single interfaces e.g. for writing to a file.

        {
          "interfaces": [
            {
              "auto": True,
              "method": "static",
              "options": {
                "address": "1.1.1.1",
                "netmask": "255.255.255.0"
              }
            }
          ]
        }
        results in

        auto eth0
        iface eth0 inet static
          address 1.1.1.1
          netmask 255.255.255.0

        :return: string
        """
        output = ""
        if not isinstance(self.interfaces, dict) or "interfaces" not in self.interfaces:
            raise ParseError("no interfaces key")
        if not isinstance(self.interfaces["interfaces"], list):
            raise ParseError("bad interfaces value")
        for iface in self.interfaces["interfaces"]:
            if not isinstance(iface, dict):
                raise ParseError("bad interface definition")
            try:
                name = iface["name"]
            except KeyError:
                raise ParseError("interface without name")
            if name == RESERVED_IFACE:
                continue
            if not isinstance(name, basestring):
                raise ParseError("bad interface name")
            if iface.get("auto"):
                output += "auto %s\n" % name
            if iface.get("allow-hotplug"):
                output += "allow-hotplug %s\n" % name

            output += "iface %s %s %s\n" % (name, iface.get("mode", "inet"), iface.get("method", "manual"))
            # options
            options = iface.get("options", {})
            if not isinstance(options, dict):
                raise ParseError("bad interface options")
            for opt_key in sorted(options):
                if options[opt_key] not in ("", None):
                    output += "  %s %s\n" % (opt_key, options[opt_key])
            # add a new line
            output += "\n"
        return output

    def get_interfaces(self):
        """
        return the configuration using the following structure

        {
          "interfaces": [
            {
              "name": "eth0",
              "auto": True,
              "method": "static",
              "options": {
                "address": "192.168.1.1",
                "netmask": "255.255.255.0",
                "gateway": "192.168.1.254",
                "dns-nameserver": "1.2.3.4"
              }
            }
          ]
        }

        :return: list
        """
        r = []
        interfaces = {}
        np = self.get()
        for idefinition in np:
            name = idefinition[1]
            # -- Uncomment to skip the reserved interface in JSON
            # if name == RESERVED_IFACE:
            #     continue
            if name in interfaces:
                iface = interfaces[name]
            else:
                iface = dict(name=name)
                interfaces[name] = iface
                r.append(iface)
            # auto?
            if idefinition[0] == "auto":
                iface["auto"] = True
            if idefinition[0] == "allow-hotplug":
                iface["allow-hotplug"] = True
            elif idefinition[0] == "iface":
                mode = idefinition[2]
                iface["mode"] = mode
                method = idefinition[3]
                iface["method"] = method
            # check for options
            if len(idefinition) == 5:
                options = {}
                for o in idefinition[4]:
                    options[o[0]] = o[1]
                iface["options"] = options
        return dict(interfaces=r)


_cached_serial = None


def get_serial():
    global _cached_serial
    if _cached_serial is None:
        try:
            with open(SERIAL_FILE, "r") as f:
                _cached_serial = (f.readline().strip(),)
        except IOError:
            print >>sys.stderr, "cannot find %s" % SERIAL_FILE
            _cached_serial = (None,)
    return _cached_serial[0]


def link_local_addr_low_bs():
    serial = get_serial()
    if serial is None:
        return DEFAULT_LINK_LOCAL_LOW_BS
    m = re.match(r"^(?:[0-9A-Fa-f]{2}:){4}([0-9A-Fa-f]{2}):([0-9A-Fa-f]{2})", serial)
    if not m:
        print >>sys.stderr, "bad serial: %r" % serial
        return DEFAULT_LINK_LOCAL_LOW_BS
    r = tuple(int(x, 16) for x in m.groups())
    return (0, 1) if r in ((0, 0), (255, 255)) else r


def link_local_section():
    d1, d2 = link_local_addr_low_bs()
    return LINK_LOCAL_SECTION % dict(iface=RESERVED_IFACE, d1=d1, d2=d2)


def to_json():
    try:
        np = NetworkParser(content=sys.stdin.read())
    except ParseError, e:
        print >>sys.stdout, "Error parsing interfaces: %s" % e
    # FIXME
    serial = get_serial()
    if serial is not None:
        for iface in np.interfaces["interfaces"]:
            if iface.get("name") == PRIMARY_IFACE:
                iface.setdefault("options", {})["hwaddress"] = serial
                break
    json.dump(np.interfaces, sys.stdout, sort_keys=True, indent=JSON_INDENT_LEVEL)


def from_json():
    try:
        d = json.load(sys.stdin)
    except ValueError:
        print >>sys.stdout, "Invalid JSON"
        sys.exit(1)

    np = NetworkParser()
    np.interfaces = d
    try:
        sys.stdout.write(np.format() + link_local_section())
    except ParseError, e:
        print >>sys.stderr, "Error parsing JSON definitions: %s" % e
        sys.exit(1)


def main():
    if len(sys.argv) > 1 and sys.argv[1] == "-s":
        from_json()
    else:
        to_json()

if __name__ == "__main__":
    main()
